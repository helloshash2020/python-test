import os
import subprocess
import csv
import difflib
from datetime import datetime, timedelta
import socket
import schedule
import time
import requests

# Function to run a shell script with arguments and capture its output in a CSV file
def run_script_with_args_and_capture_output(script_path, args, output_csv):
    try:
        # Run the shell script with arguments
        command = [script_path] + args
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        stdout, stderr = process.communicate()

        if process.returncode != 0:
            raise subprocess.CalledProcessError(process.returncode, script_path, stderr)

        # Capture the script's output (assuming it's a numeric count)
        script_output = stdout.decode().strip()

        # Get the current date and hostname
        current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        hostname = socket.gethostname()

        # Write the result to the output CSV
        with open(output_csv, mode='w', newline='') as csv_file:
            writer = csv.writer(csv_file)
            writer.writerow(["Datetime", "Hostname", "Count"])
            writer.writerow([current_datetime, hostname, script_output])

        print(f"Result from {script_path} with arguments {args} saved to {output_csv}")
    except subprocess.CalledProcessError as e:
        print(f"Error running {script_path} with arguments {args}: {e}")
    except Exception as e:
        print(f"Error: {e}")

# Function to upload to Confluence
def upload_to_confluence():
    # Confluence API URL and authentication credentials
    confluence_url = "https://your-confluence-instance/wiki/rest/api/content/{pageId}/child/attachment"
    username = "your-username"
    password = "your-password"

    # Files to upload
    lms_hostname_csv = f"LMS_{socket.gethostname()}_{datetime.now().strftime('%Y-%m-%d')}.csv"
    rpt_hostname_csv = f"RPT_{socket.gethostname()}_{datetime.now().strftime('%Y-%m-%d')}.csv"
    diff_output_csv = f"LMS-RPT_{socket.gethostname()}_{datetime.now().strftime('%Y-%m-%d')}.csv"

    # Define the headers with authentication credentials
    headers = {
        "Content-Type": "multipart/form-data",
    }
    auth = (username, password)

    # Upload the LMS CSV file to Confluence
    upload_file_to_confluence(confluence_url, lms_hostname_csv, headers, auth)

    # Upload the RPT CSV file to Confluence
    upload_file_to_confluence(confluence_url, rpt_hostname_csv, headers, auth)

    # Upload the diff CSV file to Confluence
    upload_file_to_confluence(confluence_url, diff_output_csv, headers, auth)

    # Remove old files after uploading to Confluence
    remove_old_files()

# Function to upload a file to Confluence
def upload_file_to_confluence(confluence_url, file_to_upload, headers, auth):
    try:
        with open(file_to_upload, "rb") as file:
            files = {
                "file": (file_to_upload, file),
            }
            response = requests.post(confluence_url, headers=headers, auth=auth, files=files)
            if response.status_code == 200:
                print(f"File {file_to_upload} uploaded successfully to Confluence.")
            else:
                print(f"Failed to upload file {file_to_upload}. Status code: {response.status_code}")
    except Exception as e:
        print(f"Error uploading file {file_to_upload} to Confluence: {str(e)}")

# Function to remove old files
def remove_old_files():
    # Specify the maximum age (in days) for files to be considered old
    max_age_days = 30  # Adjust this value as needed

    # List all files in the current directory
    files = os.listdir()

    # Get the current date
    current_date = datetime.now()

    for file in files:
        # Check if the file matches the naming convention of old files (e.g., "LMS_*_*.csv")
        if file.startswith("LMS_") and file.endswith(".csv"):
            # Extract the date from the filename
            date_str = file.split("_")[1]  # Assumes date is the second part of the filename
            file_date = datetime.strptime(date_str, "%Y-%m-%d")

            # Calculate the age of the file in days
            file_age = (current_date - file_date).days

            # If the file is older than the maximum age, delete it
            if file_age > max_age_days:
                os.remove(file)
                print(f"Removed old file: {file}")

# Function to run the script and perform the diff and logging
def run_script_and_diff_and_log():
    # Run the replication.sh script with arguments from the current location
    current_directory = os.getcwd()
    replication_script_path = os.path.join(current_directory, "replication.sh")

    # Define arguments for the replication.sh script for each of the 12 runs
    replication_script_args = [
        # Arguments for the first run
        ["arg1", "arg2"],
        # Arguments for the second run
        ["arg3", "arg4"],
        # Arguments for the third run
        ["arg5", "arg6"],
        # Arguments for the fourth run
        ["arg7", "arg8"],
        # Arguments for the fifth run
        ["arg9", "arg10"],
        # Arguments for the sixth run
        ["arg11", "arg12"],
        # Arguments for the seventh run
        ["arg13", "arg14"],
        # Arguments for the eighth run
        ["arg15", "arg16"],
        # Arguments for the ninth run
        ["arg17", "arg18"],
        # Arguments for the tenth run
        ["arg19", "arg20"],
        # Arguments for the eleventh run
        ["arg21", "arg22"],
        # Arguments for the twelfth run
        ["arg23", "arg24"],
    ]

    # Define output CSV file names with specific formats
    lms_hostname_csv = f"LMS_{socket.gethostname()}_{datetime.now().strftime('%Y-%m-%d')}.csv"
    rpt_hostname_csv = f"RPT_{socket.gethostname()}_{datetime.now().strftime('%Y-%m-%d')}.csv"
    diff_output_csv = f"LMS-RPT_{socket.gethostname()}_{datetime.now().strftime('%Y-%m-%d')}.csv"
    log_file = "script_log.txt"

    # Run each script with its respective arguments and capture the output
