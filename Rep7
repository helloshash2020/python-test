import psycopg2
import schedule
import time
import datetime
import requests

# PostgreSQL database connection settings
db_host = "your_db_host"
db_port = "your_db_port"
db_name = "your_db_name"
db_user = "your_db_user"
db_password = "your_db_password"

# SQL queries to run
sql_queries = [
    "SELECT * FROM table1;",
    "SELECT * FROM table2;",
    # Add more queries as needed
]

# Confluence credentials
confluence_username = "your_confluence_username"
confluence_password = "your_confluence_password"
confluence_page_id = "your_confluence_page_id"

def run_task():
    current_datetime = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    output_file = f"output_{current_datetime}.txt"

    try:
        # Connect to the PostgreSQL database
        conn = psycopg2.connect(
            host=db_host,
            port=db_port,
            dbname=db_name,
            user=db_user,
            password=db_password
        )
        
        with conn.cursor() as cursor:
            with open(output_file, "w") as file:
                for query in sql_queries:
                    # Execute SQL query
                    cursor.execute(query)
                    
                    # Get column names
                    column_names = [desc[0] for desc in cursor.description]
                    
                    # Write column headers to the file
                    file.write("\t".join(column_names) + "\n")
                    
                    # Fetch and write query results to the file
                    for row in cursor.fetchall():
                        file.write("\t".join(str(value) for value in row) + "\n")

        # Upload the output file to Confluence
        confluence_url = f"https://your-confluence-site/rest/api/content/{confluence_page_id}/child/ATTACHMENT_NAME"
        headers = {"X-Atlassian-Token": "no-check"}
        files = {"file": (output_file, open(output_file, "rb"))}
        auth = (confluence_username, confluence_password)
        
        response = requests.post(confluence_url, headers=headers, files=files, auth=auth)
        if response.status_code == 200:
            print("File uploaded successfully to Confluence!")
        else:
            print("Failed to upload file to Confluence.")

    except Exception as e:
        print(f"Error: {str(e)}")
    finally:
        # Close the database connection
        if conn:
            conn.close()

    # Remove the temporary output file
    subprocess.run(["rm", output_file])

# Schedule the task to run every 4 hours
schedule.every(4).hours.do(run_task)

# Infinite loop to keep the script running
while True:
    schedule.run_pending()
    time.sleep(1)
