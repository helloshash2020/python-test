import psycopg2
import pandas as pd
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(filename='pg_replication.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s: %(message)s')

# PostgreSQL connection parameters
db_params = {
    'dbname': 'your_database_name',
    'user': 'your_username',
    'password': 'your_password',
    'host': 'your_host',
    'port': 'your_port'
}

# Connect to the PostgreSQL database
try:
    conn = psycopg2.connect(**db_params)
    cursor = conn.cursor()

    # Query all columns from pg_replication_slots
    cursor.execute("SELECT * FROM pg_replication_slots")
    replication_slots_data = cursor.fetchall()
    replication_slots_columns = [desc[0] for desc in cursor.description]

    # Query all columns from pg_stat_replication
    cursor.execute("SELECT * FROM pg_stat_replication")
    stat_replication_data = cursor.fetchall()
    stat_replication_columns = [desc[0] for desc in cursor.description]

    # Create dataframes from the query results
    replication_slots_df = pd.DataFrame(replication_slots_data, columns=replication_slots_columns)

    # Convert datetime columns with timezones to timezone-naive format
    for col in replication_slots_df.columns:
        if 'timestamp' in str(replication_slots_df[col].dtype):
            replication_slots_df[col] = replication_slots_df[col].apply(lambda x: x.replace(tzinfo=None) if x else None)

    stat_replication_df = pd.DataFrame(stat_replication_data, columns=stat_replication_columns)

    # Save data to an Excel file
    with pd.ExcelWriter('pg_replication_data.xlsx', engine='openpyxl') as writer:
        replication_slots_df.to_excel(writer, sheet_name='Replication Slots', index=False)
        stat_replication_df.to_excel(writer, sheet_name='Stat Replication', index=False)

    logging.info('Data fetched and saved to Excel successfully.')

except Exception as e:
    logging.error(f'Error: {str(e)}')

finally:
    if conn:
        cursor.close()
        conn.close()
