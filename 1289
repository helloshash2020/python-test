import psycopg2
import concurrent.futures
import logging
import csv
import requests
import datetime
import socket
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill

# Get current date and time
current_datetime = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

# Get hostname
hostname = socket.gethostname()

# Filenames with date, time, and hostname
combined_output_filename = f'combined_output_{current_datetime}_{hostname}.xlsx'
db1_report_filename = f'db1_report_{current_datetime}_{hostname}.txt'
db2_report_filename = f'db2_report_{current_datetime}_{hostname}.txt'

# Configure logging
log_filename = f'script_{current_datetime}_{hostname}.log'
logging.basicConfig(filename=log_filename, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Database connection details
db1_params = {
    'dbname': 'db1',
    'user': 'your_username',
    'password': 'your_password',
    'host': 'db1_host'
}

db2_params = {
    'dbname': 'db2',
    'user': 'your_username',
    'password': 'your_password',
    'host': 'db2_host'
}

# Function to get row count for a table
def get_row_count(schema, table, db_params):
    try:
        connection = psycopg2.connect(**db_params)
        cursor = connection.cursor()
        cursor.execute(f"SELECT COUNT(*) FROM {schema}.{table}")
        count = cursor.fetchone()[0]
        logging.info(f"Processed {schema}.{table}")
        return (schema, table, count)
    except Exception as e:
        logging.error(f"Error processing {schema}.{table}: {str(e)}")
        return None
    finally:
        if connection:
            connection.close()

# Retrieve schema and table names from replication_list table in db1
try:
    conn1 = psycopg2.connect(**db1_params)
    cursor = conn1.cursor()
    cursor.execute("SELECT schema_name, table_name FROM replication_list")
    schema_table_list = cursor.fetchall()
    logging.info("Retrieved schema and table names from replication_list")
except Exception as e:
    logging.error(f"Error fetching data from replication_list: {str(e)}")
    conn1.close()
    raise

# Initialize lists to store row counts
db1_row_counts = []
db2_row_counts = []
difference_counts = []

# Use concurrent.futures to fetch row counts concurrently
with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:  # Adjust max_workers as needed
    # Fetch counts for db1
    db1_results = [executor.submit(get_row_count, schema, table, db1_params) for schema, table in schema_table_list]
    # Fetch counts for db2
    db2_results = [executor.submit(get_row_count, schema, table, db2_params) for schema, table in schema_table_list]

    for future in concurrent.futures.as_completed(db1_results):
        result = future.result()
        if result is not None:
            db1_row_counts.append(result)

    for future in concurrent.futures.as_completed(db2_results):
        result = future.result()
        if result is not None:
            db2_row_counts.append(result)

# Calculate the difference and prepare a combined list
combined_data = []
for db1_entry in db1_row_counts:
    schema, table, db1_count = db1_entry
    for db2_entry in db2_row_counts:
        if db2_entry[0] == schema and db2_entry[1] == table:
            db2_count = db2_entry[2]
            combined_data.append((schema, table, db1_count, db2_count))
            break

# Create an XLSX workbook and worksheet
workbook = Workbook()
worksheet = workbook.active

# Header data
header = ["Schema Name", "Table Name", "DB1 Count", "DB2 Count"]

# Apply styling to the header
header_font = Font(bold=True)
header_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")
for idx, column_name in enumerate(header, 1):
    cell = worksheet.cell(row=1, column=idx, value=column_name)
    cell.font = header_font
    cell.fill = header_fill

# Write the data rows
for row_idx, entry in enumerate(combined_data, 2):
    for col_idx, cell_value in enumerate(entry, 1):
        worksheet.cell(row=row_idx, column=col_idx, value=cell_value)

# Save the XLSX file
workbook.save(combined_output_filename)

logging.info(f"XLSX file saved successfully with a styled header to {combined_output_filename}")

# Upload combined_output.xlsx to Confluence
try:
    upload_endpoint = f"{confluence_url}/rest/api/content/{page_id}/child/attachment"
    files = {'file': (combined_output_filename, open(combined_output_filename, 'rb'))}
    response = requests.post(upload_endpoint, headers=headers, files=files)

    if response.status_code == 200:
        logging.info(f"{combined_output_filename} uploaded to Confluence successfully")
    else:
        logging.error(f"Error uploading {combined_output_filename} to Confluence. Status code: {response.status_code}")
except Exception as e:
    logging.error(f"Error uploading {combined_output_filename} to Confluence: {str(e)}")

# Upload db1_report.txt to Confluence
try:
    upload_endpoint = f"{confluence_url}/rest/api/content/{page_id}/child/attachment"
    files = {'file': (db1_report_filename, open(db1_report_filename, 'rb'))}
    response = requests.post(upload_endpoint, headers=headers, files=files)

    if response.status_code == 200:
        logging.info(f"{db1_report_filename} uploaded to Confluence successfully")
    else:
        logging.error(f"Error uploading {db1_report_filename} to Confluence. Status code: {response.status_code}")
except Exception as e:
    logging.error(f"Error uploading {db1_report_filename} to Confluence: {str(e)}")

# Upload db2_report.txt to Confluence
try:
    upload_endpoint = f"{confluence_url}/rest/api/content/{page_id}/child/attachment"
    files = {'file': (db2_report_filename, open(db2_report_filename, 'rb'))}
    response = requests.post(upload_endpoint, headers=headers, files=files)

    if response.status_code == 200:
        logging.info(f"{db2_report_filename} uploaded to Confluence successfully")
    else:
        logging.error(f"Error uploading {db2_report_filename} to Confluence. Status code: {response.status_code}")
except Exception as e:
    logging.error(f"Error uploading {db2_report_filename} to Confluence: {str(e)}")

# Rest of your code (unchanged)
