import os
import subprocess
import csv
import difflib
from datetime import datetime
import socket
import sys

# Function to run a shell script with arguments and capture its output in a CSV file
def run_script_with_args_and_capture_output(script_path, args, output_csv):
    try:
        # Run the shell script with arguments
        command = [script_path] + args
        command_str = ' '.join(command)
        process = subprocess.Popen(command_str, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        stdout, stderr = process.communicate()

        if process.returncode != 0:
            raise subprocess.CalledProcessError(process.returncode, command_str, stderr)

        # Capture the script's output (assuming it's a numeric count)
        script_output = stdout.decode().strip()

        # Get the current date and hostname
        current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        hostname = socket.gethostname()

        # Create the "replication_count" directory if it doesn't exist
        if not os.path.exists("replication_count"):
            os.makedirs("replication_count")

        # Write the result to the output CSV in the "replication_count" directory
        output_csv_path = os.path.join("replication_count", output_csv)
        with open(output_csv_path, mode='w', newline='') as csv_file:
            writer = csv.writer(csv_file)
            writer.writerow(["Datetime", "Hostname", "Count"])
            writer.writerow([current_datetime, hostname, script_output])

        print("Result from {} with arguments {} saved to {}".format(script_path, args, output_csv_path))
    except subprocess.CalledProcessError as e:
        print("Error running {} with arguments {}: {}".format(script_path, args, e))
    except Exception as e:
        print("Error: {}".format(e))

# Function to compare two CSV files and highlight the differences
def compare_and_highlight_diff(file1, file2, output_csv):
    try:
        # Read the contents of the two CSV files
        with open(file1, 'r') as f1, open(file2, 'r') as f2:
            lines1 = f1.readlines()
            lines2 = f2.readlines()

        # Calculate the diff between the two CSV files
        diff = difflib.unified_diff(lines1, lines2, fromfile=file1, tofile=file2)

        # Write the diff to the output CSV
        with open(output_csv, 'w') as diff_file:
            diff_file.writelines(diff)

        print(f"Differences between {file1} and {file2} saved to {output_csv}")
    except Exception as e:
        print(f"Error comparing and highlighting differences: {e}")

# Function to upload a file to Confluence using curl
def upload_to_confluence_with_curl(file_to_upload, page_id):
    try:
        # Construct the curl command to upload the file
        curl_command = [
            'curl',
            '-u', 'your-username:your-password',
            '-X', 'POST',
            '-H', 'X-Atlassian-Token: no-check',
            '-F', f'file=@{file_to_upload}',
            f'https://your-confluence-instance/wiki/rest/api/content/{page_id}/child/attachment'
        ]

        # Execute the curl command
        subprocess.run(curl_command, check=True)

        print(f"File {file_to_upload} uploaded successfully to Confluence.")

        # Remove the uploaded file from the "replication_count" directory
        os.remove(file_to_upload)
        print(f"Removed {file_to_upload} after uploading to Confluence.")
    except subprocess.CalledProcessError as e:
        print(f"Error uploading file {file_to_upload} to Confluence: {e}")
    except Exception as e:
        print(f"Error: {e}")

# Function to enable logging to a file
def enable_logging(log_file):
    try:
        # Redirect stdout and stderr to the log file
        log_fd = open(log_file, "w")
        sys.stdout = log_fd
        sys.stderr = log_fd
    except Exception as e:
        print(f"Error enabling logging: {e}")

# Define output CSV file names with specific formats
lms_hostname_csv = f"LMS_{socket.gethostname()}_{datetime.now().strftime('%Y-%m-%d')}.csv"
rpt_hostname_csv = f"RPT_{socket.gethostname()}_{datetime.now().strftime('%Y-%m-%d')}.csv"
diff_output_csv = f"LMS-RPT_{socket.gethostname()}_{datetime.now().strftime('%Y-%m-%d')}.csv"
log_file = "script_log.txt"

# Enable logging to the log file
enable_logging(log_file)

# Replace 'replication.sh' with the actual script path
replication_script_path = "/path/to/replication.sh"

# Define arguments for the replication.sh script for each of the 12 runs
replication_script_args = [
    # Arguments for the first run
    ["arg1", "arg2"],
    # Arguments for the second run
    ["arg3", "arg4"],
    # Arguments for the third run
    ["arg5", "arg6"],
    # Arguments for the fourth run
    ["arg7", "arg8"],
    # Arguments for the fifth run
    ["arg9", "arg10"],
    # Arguments for the sixth run
    ["arg11", "arg12"],
    # Arguments for the seventh run
    ["arg13", "arg14"],
    # Arguments for the eighth run
    ["arg15", "arg16"],
    # Arguments for the ninth run
    ["arg17", "arg18"],
    # Arguments for the tenth run
    ["arg19", "arg20"],
    # Arguments for the eleventh run
    ["arg21", "arg22"],
    # Arguments for the twelfth run
    ["arg23", "arg24"],
]

# Run each script with its respective arguments and capture the output
for i, args in enumerate(replication_script_args):
    output_csv = lms_hostname_csv if i < 6 else rpt_hostname_csv
    run_script_with_args_and_capture_output(replication_script_path, args, output_csv)

# Compare the two CSV files and write the differences to the diff_output_csv
compare_and_highlight_diff(lms_hostname_csv, rpt_hostname_csv, diff_output_csv)

# Upload the report to Confluence
upload_to_confluence_with_curl(rpt_hostname_csv, page_id='your-page-id')
