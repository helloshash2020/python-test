import psycopg2
from fpdf import FPDF
import schedule
import time
import datetime
import requests

# PostgreSQL database connection parameters
db_params = {
    "host": "your_postgres_host",
    "database": "your_database_name",
    "user": "your_database_user",
    "password": "your_database_password",
}

# Confluence credentials
confluence_username = "your_confluence_username"
confluence_password = "your_confluence_password"
confluence_page_id = "your_confluence_page_id"

# SQL queries to run
sql_queries = [
    "SELECT * FROM table1;",
    "SELECT * FROM table2;",
    # Add more queries as needed
]

def execute_sql_queries():
    try:
        # Connect to the PostgreSQL database
        conn = psycopg2.connect(**db_params)
        cursor = conn.cursor()

        current_datetime = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        pdf_file = f"report_{current_datetime}.pdf"

        # Create a PDF document
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        
        for query in sql_queries:
            cursor.execute(query)
            results = cursor.fetchall()

            # Add the query results to the PDF
            pdf.multi_cell(0, 10, query, align="L")
            for row in results:
                pdf.cell(200, 10, txt=str(row), ln=True)

        # Output the PDF to a file
        pdf.output(pdf_file)

        # Upload the PDF file to Confluence
        confluence_url = f"https://your-confluence-site/rest/api/content/{confluence_page_id}/child/ATTACHMENT_NAME"
        headers = {"X-Atlassian-Token": "no-check"}
        files = {"file": (pdf_file, open(pdf_file, "rb"))}
        auth = (confluence_username, confluence_password)

        response = requests.post(confluence_url, headers=headers, files=files, auth=auth)
        if response.status_code == 200:
            print("PDF file uploaded successfully to Confluence!")
        else:
            print("Failed to upload PDF file to Confluence.")

    except Exception as e:
        print(f"Error: {e}")
    finally:
        cursor.close()
        conn.close()

# Schedule the task to run every 4 hours
schedule.every(4).hours.do(execute_sql_queries)

# Infinite loop to keep the script running
while True:
    schedule.run_pending()
    time.sleep(1)
