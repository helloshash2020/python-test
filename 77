import os
import subprocess
from datetime import datetime
import socket
import requests

# Function to run a shell script with arguments and capture its output in a text file
def run_script_with_args_and_capture_output(script_path, args, output_txt):
    try:
        # Run the shell script with arguments
        command = [script_path] + args
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        stdout, stderr = process.communicate()

        if process.returncode != 0:
            raise subprocess.CalledProcessError(process.returncode, script_path, stderr)

        # Capture the script's output
        script_output = stdout.decode()

        # Get the current date and hostname
        current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        hostname = socket.gethostname()

        # Write the result to the output text file with proper alignment
        with open(output_txt, 'w') as txt_file:
            txt_file.write(f"{'Datetime':<20}{'Hostname':<20}{'Count':<20}\n")
            txt_file.write(f"{current_datetime:<20}{hostname:<20}{script_output:<20}\n")

        print(f"Result from {script_path} with arguments {args} saved to {output_txt}")
    except subprocess.CalledProcessError as e:
        print(f"Error running {script_path} with arguments {args}: {e}")
    except Exception as e:
        print(f"Error: {e}")

# Run the replication.sh script with arguments from the current location
current_directory = os.getcwd()
replication_script_path = os.path.join(current_directory, "replication.sh")

# Define arguments for the replication.sh script for each of the 12 runs
replication_script_args = [
    # Arguments for the first run
    ["arg1", "arg2"],
    # Arguments for the second run
    ["arg3", "arg4"],
    # Arguments for the third run
    ["arg5", "arg6"],
    # Arguments for the fourth run
    ["arg7", "arg8"],
    # Arguments for the fifth run
    ["arg9", "arg10"],
    # Arguments for the sixth run
    ["arg11", "arg12"],
    # Arguments for the seventh run
    ["arg13", "arg14"],
    # Arguments for the eighth run
    ["arg15", "arg16"],
    # Arguments for the ninth run
    ["arg17", "arg18"],
    # Arguments for the tenth run
    ["arg19", "arg20"],
    # Arguments for the eleventh run
    ["arg21", "arg22"],
    # Arguments for the twelfth run
    ["arg23", "arg24"],
]

# Paths to your 12 shell scripts and output text files
script_paths = [
    replication_script_path,
    replication_script_path,
    replication_script_path,
    replication_script_path,
    replication_script_path,
    replication_script_path,
    replication_script_path,
    replication_script_path,
    replication_script_path,
    replication_script_path,
    replication_script_path,
    replication_script_path,
]

# Directory to store files for upload to Confluence
replication_count_directory = "replication_count"

# Create the directory if it doesn't exist
if not os.path.exists(replication_count_directory):
    os.mkdir(replication_count_directory)

# Run each script with its respective arguments and capture the output in text files
for i in range(12):
    output_txt = os.path.join(replication_count_directory, f"output_{i + 1}.txt")
    run_script_with_args_and_capture_output(script_paths[i], replication_script_args[i], output_txt)

# Upload the text files to Confluence using Confluence REST API
confluence_url = "YOUR_CONFLUENCE_URL"
confluence_username = "YOUR_USERNAME"
confluence_password = "YOUR_PASSWORD"

# Iterate through the text files and upload them
for i in range(12):
    output_txt = os.path.join(replication_count_directory, f"output_{i + 1}.txt")
    file_name = os.path.basename(output_txt)
    url = f"{confluence_url}/wiki/rest/api/content/YOUR_PARENT_PAGE_ID/child/attachment"  # Replace YOUR_PARENT_PAGE_ID
    
    headers = {
        'X-Atlassian-Token': 'no-check',
    }
    
    data = {
        'comment': 'Uploaded from Python script',
    }
    
    with open(output_txt, 'rb') as file:
        files = {
            'file': (file_name, file),
        }
        
        response = requests.post(url, headers=headers, auth=(confluence_username, confluence_password), data=data, files=files)
    
    if response.status_code == 200:
        print(f"Uploaded {output_txt} to Confluence.")
    else:
        print(f"Failed to upload {output_txt} to Confluence. Status code: {response.status_code}")

# Remove the uploaded text files
for i in range(12):
    output_txt = os.path.join(replication_count_directory, f"output_{i + 1}.txt")
    os.remove(output_txt)
    print(f"Removed {output_txt}.")
