import psycopg2
import openpyxl
import schedule
import time
import datetime
import socket
import logging
import requests

# PostgreSQL database connection parameters
db_params = {
    "dbname": "your_database_name",
    "user": "your_database_user",
    "password": "your_database_password",
    "host": "your_database_host",
    "port": "your_database_port",
}

# SQL query to execute
sql_query = "SELECT * FROM your_table;"

# Confluence credentials
confluence_username = "your_confluence_username"
confluence_password = "your_confluence_password"
confluence_page_id = "your_confluence_page_id"

# Logging setup
logging.basicConfig(filename='query_log.txt', level=logging.INFO)

def run_task():
    try:
        # Connect to PostgreSQL and execute the query
        conn = psycopg2.connect(**db_params)
        cursor = conn.cursor()
        cursor.execute(sql_query)
        rows = cursor.fetchall()

        # Create an Excel workbook
        current_datetime = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        hostname = socket.gethostname()
        sheet_name = f"{current_datetime}_{hostname}"
        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.title = sheet_name

        # Write the query results to the Excel sheet
        for row in rows:
            sheet.append(row)

        # Save the Excel file
        excel_filename = f"query_result_{current_datetime}.xlsx"
        workbook.save(excel_filename)

        # Upload the Excel file to Confluence
        confluence_url = f"https://your-confluence-site/rest/api/content/{confluence_page_id}/child/ATTACHMENT_NAME"
        headers = {"X-Atlassian-Token": "no-check"}
        files = {"file": (excel_filename, open(excel_filename, "rb"))}
        auth = (confluence_username, confluence_password)

        response = requests.post(confluence_url, headers=headers, files=files, auth=auth)
        if response.status_code == 200:
            logging.info(f"File '{excel_filename}' uploaded successfully to Confluence!")
        else:
            logging.error(f"Failed to upload file '{excel_filename}' to Confluence.")

        # Close the database connection
        cursor.close()
        conn.close()

    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")

# Schedule the task to run every minute
schedule.every(1).minutes.do(run_task)

# Infinite loop to keep the script running
while True:
    schedule.run_pending()
    time.sleep(1)
p
