import schedule
import time
import psycopg2
import pandas as pd
from openpyxl import Workbook
import datetime
import platform
import requests

# PostgreSQL connection parameters
db_params = {
    'host': 'your_postgresql_host',
    'database': 'your_database',
    'user': 'your_user',
    'password': 'your_password'
}

# Confluence credentials and page information
confluence_username = 'your_confluence_username'
confluence_password = 'your_confluence_password'
confluence_page_id = 'your_confluence_page_id'
confluence_base_url = 'https://your-confluence-site'
attachment_name = 'log.txt'

# Log file
log_file_name = 'log.txt'

def run_queries_and_save_to_excel():
    current_datetime = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    hostname = platform.node()
    sheet_name = f'{current_datetime}_{hostname}'

    # Connect to PostgreSQL
    try:
        conn = psycopg2.connect(**db_params)
        cursor = conn.cursor()

        # Define your SQL queries here
        queries = [
            'SELECT * FROM table1',
            'SELECT * FROM table2'
        ]

        # Execute queries and store results in a Pandas DataFrame
        dfs = []
        for i, query in enumerate(queries):
            df = pd.read_sql_query(query, conn)
            dfs.append(df)

        # Create an Excel writer and save DataFrames to separate sheets
        with pd.ExcelWriter('output.xlsx', engine='openpyxl') as writer:
            for i, df in enumerate(dfs):
                df.to_excel(writer, sheet_name=f'Sheet_{i}', index=False)

        # Upload log file to Confluence
        with open(log_file_name, 'r') as log_file:
            log_content = log_file.read()
            confluence_url = f'{confluence_base_url}/rest/api/content/{confluence_page_id}/child/{attachment_name}'
            headers = {'X-Atlassian-Token': 'no-check'}
            files = {'file': (attachment_name, log_content)}
            auth = (confluence_username, confluence_password)
            response = requests.post(confluence_url, headers=headers, files=files, auth=auth)

        if response.status_code == 200:
            print('Log file uploaded to Confluence successfully!')
        else:
            print('Failed to upload log file to Confluence.')

        # Clean up
        cursor.close()
        conn.close()
    
    except Exception as e:
        # Log any errors
        with open(log_file_name, 'a') as log_file:
            log_file.write(f'Error: {str(e)}\n')

# Schedule the task to run every minute
schedule.every(1).minutes.do(run_queries_and_save_to_excel)

# Infinite loop to keep the script running
while True:
    schedule.run_pending()
    time.sleep(1)
