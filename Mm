import psycopg2  # Assuming PostgreSQL as the database
import logging

# Configure logging
logging.basicConfig(filename='script.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Database connection details
db1_params = {
    'dbname': 'db1',
    'user': 'your_username',
    'password': 'your_password',
    'host': 'db1_host'
}

db2_params = {
    'dbname': 'db2',
    'user': 'your_username',
    'password': 'your_password',
    'host': 'db2_host'
}

# Connect to the databases
try:
    conn1 = psycopg2.connect(**db1_params)
    conn2 = psycopg2.connect(**db2_params)
    logging.info("Connected to databases successfully")
except Exception as e:
    logging.error(f"Database connection error: {str(e)}")
    raise

# Retrieve schema and table names from replication_list table in db1
try:
    cursor = conn1.cursor()
    cursor.execute("SELECT schema_name, table_name FROM replication_list")
    schema_table_list = cursor.fetchall()
    logging.info("Retrieved schema and table names from replication_list")
except Exception as e:
    logging.error(f"Error fetching data from replication_list: {str(e)}")
    conn1.close()
    conn2.close()
    raise

# Initialize dictionaries to store row counts
db1_row_counts = {}
db2_row_counts = {}
difference_counts = {}

# Iterate through schema and table names
for schema, table in schema_table_list:
    try:
        # Get row count for db1
        cursor.execute(f"SELECT COUNT(*) FROM {schema}.{table}")
        db1_count = cursor.fetchone()[0]

        # Get row count for db2
        cursor2 = conn2.cursor()
        cursor2.execute(f"SELECT COUNT(*) FROM {schema}.{table}")
        db2_count = cursor2.fetchone()[0]
        cursor2.close()

        db1_row_counts[f"{schema}.{table}"] = db1_count
        db2_row_counts[f"{schema}.{table}"] = db2_count
        difference_counts[f"{schema}.{table}"] = db1_count - db2_count
        logging.info(f"Processed {schema}.{table}")
    except Exception as e:
        logging.error(f"Error processing {schema}.{table}: {str(e)}")

# Save the counts in Loutput1, Routput2, and doutput3
try:
    with open('Loutput1.txt', 'w') as loutput_file:
        loutput_file.write(str(db1_row_counts))

    with open('Routput2.txt', 'w') as routput_file:
        routput_file.write(str(db2_row_counts))

    with open('doutput3.txt', 'w') as doutput_file:
        doutput_file.write(str(difference_counts))

    logging.info("Counts saved successfully")
except Exception as e:
    logging.error(f"Error saving counts: {str(e)}")

# Close database connections
cursor.close()
conn1.close()
conn2.close()
